use crate::ast::{self, Span};
use crate::lexer;
use crate::TonyError;
use crate::span;
use std::iter::FromIterator;

grammar;

pub Program: ast::Program = {
    <func_defs:FuncDef*> => ast::Program(Vec::from_iter(func_defs.into_iter())),
};

// Constants
Identifier: Span<ast::Identifier> = <l:@L> <s:IdentifierString> <r:@R> => span![ast::Identifier(s); l,r];
CharConst: ast::CharConst = <c:CChar> => ast::CharConst(c);
IntConst: ast::IntConst = <i:Number> => ast::IntConst(i.0, i.1);

FuncDef: ast::Span<ast::FuncDef> = {
  <l:@L> "decl" <header:Header> <r:@R> => {
    span![ast::FuncDef {
        header,
        declarations: vec![],
        body: vec![],
        is_extern: true,
    }; l, r]
  },
  <l:@L> "def" <header:Header> ":" <decls:Decl*> <stmts:Stmt*> "end" <r:@R> => {
    span![ast::FuncDef {
        header,
        declarations: Vec::from_iter(decls.into_iter()),
        body: Vec::from_iter(stmts.into_iter()),
        is_extern: false,
    }; l, r]
  },
};

Header: (ast::Formal, Vec<ast::Formal>) = {
   <l:@L> <header_type:TonyType?> <r:@R> <header_ident:Identifier> "(" <args:SemicolonList<FormalList>> ")" => {
     (ast::Formal {
          is_ref: false,
          var: ast::VarDef {
            tony_type: header_type.unwrap_or(span![ast::TonyType::Unit; l, r]),
            id: header_ident,
          },
        }, Vec::from_iter(args.into_iter().flatten()))
   }
}

FormalList: Vec<ast::Formal> = {
  <_ref:"ref"?> <t:TonyType> <ids:CommaList<Identifier>> => {
    ids.into_iter().map(|id| ast::Formal { is_ref: _ref.is_some(), var: ast::VarDef { tony_type: t.clone(), id, } }).collect::<Vec<ast::Formal>>()
  }
}

DelimNoTrailing<T, Delimeter>: Vec<T> = {
    <v:(<T> Delimeter)*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
}

Delim<T, Delimeter>: Vec<T> = {
    <v:(<T> Delimeter)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

CommaList<T>: Vec<T> = {
    Delim<T, ","> => <>
}

CommaNoTrailingList<T>: Vec<T> = {
    DelimNoTrailing<T, ","> => <>
}


SemicolonList<T>: Vec<T> = {
    Delim<T, ";"> => <>
}

SemicolonNoTrailingList<T>: Vec<T> = {
    DelimNoTrailing<T, ";"> => <>
}

VarDefList: Vec<ast::VarDef> = {
  <t:TonyType> <ids:CommaNoTrailingList<Identifier>> => {
    ids.into_iter().map(|id| ast::VarDef { tony_type: t.clone(), id, }).collect::<Vec<ast::VarDef>>()
  }
}
Decl: Span<ast::Decl>= {
  <l:@L> <v:VarDefList> <r:@R> => {
    span![ast::Decl::Var(v); l,r]
  },
  <l:@L> <f:FuncDef> <r:@R> =>{
     span![ast::Decl::Func(f); l,r]
  },
}

VarDef: ast::VarDef = {
  <t:TonyType> <id:Identifier> => {
      ast::VarDef {
          tony_type: t,
          id,
      }
  },
};

TonyType: Span<ast::TonyType> = {
  <l:@L> <t: ETonyType> <r:@R> => span![t; l,r],
  <l:@L> "int" <r:@R> => {
    span![ast::TonyType::Int; l,r]
  },
  <l:@L> "bool" <r:@R> => {
    span![ast::TonyType::Bool; l,r]
  },
  <l:@L> "char" <r:@R> => {
    span![ast::TonyType::Char; l,r]
  },
}


ETonyType: ast::TonyType = {
  "list" "[" <t: TonyType> "]" => ast::TonyType::List(Box::new(t)),
  <t: TonyType> "[" "]" => ast::TonyType::Array(Box::new(t)),
}


Stmt: Span<ast::Stmt> = {
  <l:@L> <s:Simple> <r:@R> => span![ast::Stmt::Simple(s); l, r],
  <l:@L> "exit" <r:@R> => span![ast::Stmt::Exit; l, r],
  <l:@L> "return" <e:Expr> <r:@R> => span![ast::Stmt::Return(Box::new(e)); l, r],
  <l:@L> <i:IfStatement> <r:@R> => span![i; l,r],
  //ForStmt,
}

IfStatement: ast::Stmt = {
    "for" <init_simple_list:CommaNoTrailingList<Simple>> ";" <condition:Expr> ";" <eval_simple_list:CommaNoTrailingList<Simple>> ":" <body:Stmt+> "end" => {
        ast::Stmt::Control(ast::StmtType::For {
          init: init_simple_list,
          condition: Box::new(condition),
          eval: eval_simple_list,
          body,
        })
    },
    "if" <condition:Expr> ":" <body:Stmt+> <elifs:(<@L> "elif" <Expr> ":" <Stmt+> <@R>)*> <_else:("else" ":" <Stmt+>)?> "end" => {
        let mut _else = _else;

        // Elifs:
        for e in elifs.into_iter().rev() {
            let x = span![ast::Stmt::Control(ast::StmtType::If { condition: Box::new(e.1), body: e.2, _else: _else.unwrap_or(vec![]) }); e.0, e.3];
            _else = Some(vec![x]);
        }

        ast::Stmt::Control(ast::StmtType::If { condition: Box::new(condition), body, _else: _else.unwrap_or(vec![])})
    },
};

Simple: Span<ast::Simple> = {
    <l:@L> "skip" <r:@R> => span![ast::Simple::Skip;l,r],
    <l:@L> <id:Identifier> "(" <e:CommaList<Expr>> ")" <r:@R> => span![ast::Simple::Call(ast::Call(id, e));l,r],
    <l:@L> <a:Atom> ":=" <e:Expr> <r:@R> => span![ast::Simple::Assignment(a, Box::new(e));l,r],
}

Atom: ast::Atom = {
    <id:Identifier> => ast::Atom::Id(id),
    <s:StringLiteral> => ast::Atom::StringLiteral(ast::StringLiteral(s)),
    <l:@L> "head" <r:@R> "(" <e:CommaList<Expr>> ")" => ast::Atom::Call(ast::Call(span![ast::Identifier("head".to_string());l,r], e)),
    <l:@L> "tail" <r:@R> "(" <e:CommaList<Expr>> ")" => ast::Atom::Call(ast::Call(span![ast::Identifier("tail".to_string());l,r], e)),
    <l:@L> "nil?" <r:@R> "(" <e:CommaList<Expr>> ")" => ast::Atom::Call(ast::Call(span![ast::Identifier("nil?".to_string());l,r], e)),
    <id:Identifier> "(" <e:CommaList<Expr>> ")" => ast::Atom::Call(ast::Call(id, e)),
    <atom:Atom> "[" <expr:Expr> "]" => ast::Atom::AtomIndex(Box::new(atom), Box::new(expr)),
}

Expr: Span<ast::Expr> = {
  <l:@L> <e1:Expr> "=" <e2:FExpr> <r:@R> => span![ast::Expr::Op(Box::new(e1), ast::Operator::Equals, Box::new(e2)); l,r],
  <l:@L> <e1:Expr> "<>" <e2:FExpr> <r:@R> => span![ast::Expr::Op(Box::new(e1), ast::Operator::NotEquals, Box::new(e2)); l,r],
  <l:@L> <e1:Expr> "<" <e2:FExpr> <r:@R> => span![ast::Expr::Op(Box::new(e1), ast::Operator::Less, Box::new(e2)); l,r],
  <l:@L> <e1:Expr> ">" <e2:FExpr> <r:@R> => span![ast::Expr::Op(Box::new(e1), ast::Operator::Greater, Box::new(e2)); l,r],
  <l:@L> <e1:Expr> "<=" <e2:FExpr> <r:@R> => span![ast::Expr::Op(Box::new(e1), ast::Operator::LessOrEqual, Box::new(e2)); l,r],
  <l:@L> <e1:Expr> ">=" <e2:FExpr> <r:@R> => span![ast::Expr::Op(Box::new(e1), ast::Operator::GreaterOrEqual, Box::new(e2)); l,r],
  <l:@L> "not" <e:FExpr> <r:@R> => span![ast::Expr::Not(Box::new(e)); l,r],
  <l:@L> <e1: Expr> "and" <e2: FExpr> <r:@R> => span![ast::Expr::And(Box::new(e1), Box::new(e2)); l,r],
  <l:@L> <e1: Expr> "or" <e2: FExpr> <r:@R> => span![ast::Expr::Or(Box::new(e1), Box::new(e2)); l,r],
  <l:@L> <e1: Expr> <il:@L> "#" <ir:@R> <e2: FExpr> <r:@R> => span![ast::Expr::Atom(ast::Atom::Call(ast::Call(span![ast::Identifier("cons".to_string()); il,ir], vec![e1, e2]))); l,r],
  <e: FExpr> => e,
}

FExpr: Span<ast::Expr> = {
  <l:@L> <e1:FExpr> "+" <e2:TExpr> <r:@R> => span![ast::Expr::Op(Box::new(e1), ast::Operator::Plus, Box::new(e2));l,r],
  <l:@L> <e1:FExpr> "-" <e2:TExpr> <r:@R> => span![ast::Expr::Op(Box::new(e1), ast::Operator::Minus, Box::new(e2));l,r],
  <e: TExpr> => e,
}

TExpr: Span<ast::Expr> = {
   "+" <e:DExpr> => e,
  <l:@L> "-" <e:DExpr> <r:@R> => span![ast::Expr::Minus(Box::new(e));l,r],
  <l:@L> <e1:TExpr> "*" <e2:DExpr> <r:@R> => span![ast::Expr::Op(Box::new(e1), ast::Operator::Times, Box::new(e2));l,r],
  <l:@L> <e1:TExpr> "mod" <e2:DExpr> <r:@R> => span![ast::Expr::Op(Box::new(e1), ast::Operator::Mod, Box::new(e2));l,r],
  <l:@L> <e1:TExpr> "/" <e2:DExpr> <r:@R> => span![ast::Expr::Op(Box::new(e1), ast::Operator::Div, Box::new(e2));l,r],
   <e:DExpr> => e,
}

DExpr: Span<ast::Expr> = {
  <l:@L> <a:Atom> <r:@R> => span![ast::Expr::Atom(a); l,r],
  <l:@L> "true" <r:@R> => span![ast::Expr::True; l,r],
  <l:@L> "false" <r:@R> => span![ast::Expr::False; l,r],
  //"new" <t:TonyType> "[" <e: Expr> "]" => ast::Expr::New(t, Box::new(e)),
  <l:@L> "nil" <r:@R> => span![ast::Expr::Nil; l,r],
  <l:@L> <i:IntConst> <r:@R> => span![ast::Expr::IntConst(i); l,r],
  <l:@L> <c:CharConst> <r:@R> => span![ast::Expr::CharConst(c); l,r],
  "(" <e: Expr> ")" => e,
}

// Hook external lexer:
extern {
    type Location = usize;
    type Error = TonyError;

    enum lexer::Token {
      IdentifierString => lexer::Token::Identifier(<String>),
      StringLiteral => lexer::Token::StringLiteral(<String>),
      CChar => lexer::Token::CChar(<char>),
      Number => lexer::Token::Number(<i64>, <String>),
      "def" => lexer::Token::Def,
      "decl" => lexer::Token::Decl,
      "int" => lexer::Token::Int,
      "bool" => lexer::Token::Bool,
      "char" => lexer::Token::Char,
      "ref" => lexer::Token::Ref,
      "end" => lexer::Token::End,
      "exit" => lexer::Token::Exit,
      "and" => lexer::Token::And,
      "or" => lexer::Token::Or,
      "not" => lexer::Token::Not,
      "true" => lexer::Token::True,
      "false" => lexer::Token::False,
      "new" => lexer::Token::New,
      "head" => lexer::Token::Head,
      "tail" => lexer::Token::Tail,
      "nil?" => lexer::Token::NilQ,
      "nil" => lexer::Token::Nil,
      "list" => lexer::Token::List,
      "if" => lexer::Token::If,
      "for" => lexer::Token::For,
      "elif" => lexer::Token::Elif,
      "else" => lexer::Token::Else,
      "return" => lexer::Token::Return,
      "skip" => lexer::Token::Skip,
      "+" => lexer::Token::Plus,
      "-" => lexer::Token::Minus,
      "*" => lexer::Token::Times,
      "=" => lexer::Token::Equals,
      "#" => lexer::Token::Octothorpe,
      "<>" => lexer::Token::NotEquals,
      "<" => lexer::Token::Lthan,
      ">" => lexer::Token::Gthan,
      "<=" => lexer::Token::Lequals,
      ">=" => lexer::Token::Gequals,
      "mod" => lexer::Token::Mod,
      "/" => lexer::Token::Backslash,
      "," => lexer::Token::Comma,
      ":" => lexer::Token::Colon,
      ":=" => lexer::Token::Assignment,
      ";" => lexer::Token::Semicolon,
      "=" => lexer::Token::Equals,
      "("   => lexer::Token::LParen,
      ")"   => lexer::Token::RParen,
      "["   => lexer::Token::LSqBracket,
      "]"   => lexer::Token::RSqBracket,
    }
}
